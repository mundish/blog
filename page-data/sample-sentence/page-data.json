{"componentChunkName":"component---src-templates-blog-post-js","path":"/sample-sentence","webpackCompilationHash":"38ff708252d235277109","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/sample-sentence\",\n  \"date\": \"2019-11-16\",\n  \"title\": \"Sample sentence\",\n  \"tags\": [\"japanese\"],\n  \"excerpt\": \"The idea here is to figure out the translation of a random sentence I've come up with: You're only mad because they stole the izakaya's tame monkey.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The idea here is to figure out the translation of a random sentence I've come up with:\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"You're only mad because they stole the izakaya's tame monkey.\")), mdx(\"br\", null), \"My initial effort to gather the pieces needed yielded this:\", mdx(\"br\", null), mdx(Furigana, {\n    characters: [{\n      kanji: '怒',\n      kana: 'おこ'\n    }],\n    mdxType: \"Furigana\"\n  }), \"\\u308B - To get angry/mad\", mdx(\"br\", null), mdx(Furigana, {\n    characters: [{\n      kanji: '居',\n      kana: 'い'\n    }, {\n      kanji: '酒',\n      kana: 'ざか'\n    }, {\n      kanji: '屋',\n      kana: 'や'\n    }],\n    mdxType: \"Furigana\"\n  }), \" - Izakaya\", mdx(\"br\", null), mdx(Furigana, {\n    characters: [{\n      kanji: '盗',\n      kana: 'ぬす'\n    }],\n    mdxType: \"Furigana\"\n  }), \"\\u3080 - To steal\", mdx(\"br\", null), mdx(Furigana, {\n    characters: [{\n      kanji: '温',\n      kana: 'おん'\n    }, {\n      kanji: '順',\n      kana: 'じゅん'\n    }],\n    mdxType: \"Furigana\"\n  }), \"(\\u306A) - Tame (adj.)\", mdx(\"br\", null), \"A(\\u306E)\\u305F\\u3081\\u306B... - Because of A ...\", mdx(\"br\", null), mdx(\"br\", null), \"Which would result in something like:\", mdx(\"br\", null), mdx(\"div\", {\n    className: 'text-lg text-center'\n  }, mdx(Furigana, {\n    characters: [{\n      kanji: '居',\n      kana: 'い'\n    }, {\n      kanji: '酒',\n      kana: 'ざか'\n    }, {\n      kanji: '屋',\n      kana: 'や'\n    }],\n    mdxType: \"Furigana\"\n  }), \"\\u306E\", mdx(Furigana, {\n    characters: [{\n      kanji: '温',\n      kana: 'おん'\n    }, {\n      kanji: '順',\n      kana: 'じゅん'\n    }],\n    mdxType: \"Furigana\"\n  }), \"\\u306A\\u30B5\\u30EB\\u3092\", mdx(Furigana, {\n    characters: [{\n      kanji: '盗',\n      kana: 'ぬす'\n    }],\n    mdxType: \"Furigana\"\n  }), \"\\u3093\\u3060\\u305F\\u3081\\u306B\", mdx(Furigana, {\n    characters: [{\n      kanji: '怒',\n      kana: 'おこ'\n    }],\n    mdxType: \"Furigana\"\n  }), \"\\u3089\\u308C\\u307E\\u3057\\u305F\\u3002\"), mdx(\"br\", null), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"However\"), \", reaching out to a friend (native speaker), I got a few pointers:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tame has a lot of possible translations, but in this case, \\u201D\\u98FC\\u3044\\u306A\\u3089\\u3059\\u201D or \\u201C\\u304A\\u3068\\u306A\\u3057\\u3044\\u201D sounds better.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \\u306B particle after \\u305F\\u3081 can be omitted, making it a bit more conversational (like with a lot of particle uses).\")), mdx(\"br\", null), mdx(\"p\", null, \"So what I ended up with was the following:\"), mdx(\"div\", {\n    className: 'text-lg text-center'\n  }, mdx(Furigana, {\n    characters: [{\n      kanji: '居',\n      kana: 'い'\n    }, {\n      kanji: '酒',\n      kana: 'ざか'\n    }, {\n      kanji: '屋',\n      kana: 'や'\n    }],\n    mdxType: \"Furigana\"\n  }), \"\\u306E\\u304A\\u3068\\u306A\\u3057\\u3044\\u30B5\\u30EB\\u3092\", mdx(Furigana, {\n    characters: [{\n      kanji: '盗',\n      kana: 'ぬす'\n    }],\n    mdxType: \"Furigana\"\n  }), \"\\u3093\\u3060\\u305F\\u3081\\u3001\", mdx(Furigana, {\n    characters: [{\n      kanji: '怒',\n      kana: 'おこ'\n    }],\n    mdxType: \"Furigana\"\n  }), \"\\u3089\\u308C\\u307E\\u3057\\u305F\\u3002\"), mdx(\"br\", null), mdx(\"h2\", null, mdx(\"strong\", {\n    parentName: \"h2\"\n  }, \"Take aways:\")), mdx(\"p\", null, \"Apart from the new vocabulary itself, what I learned was the concept of \\u305F\\u3081:\"), mdx(\"p\", null, \"\\u305F\\u3081 have other possible uses, but in this case the concept was that of a cause having an effect.\"), mdx(\"p\", null, \"Both cause and effect can be either a noun or an action (verb).\"), mdx(\"p\", null, \"Given the structure \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cause\"), \" (\\u306E)\\u305F\\u3081(\\u306B/\\u306E) \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"effect\"), \", the following rules applies:\"), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Noun\"), \" \\u306E\\u305F\\u3081\\u306E \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"noun\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Noun\"), \" \\u306E\\u305F\\u3081(\\u306B) \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"verb\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Verb\"), \" \\u305F\\u3081\\u306E \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"noun\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Verb\"), \" \\u305F\\u3081(\\u306B) \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"verb\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Sample sentence","date":"2019-11-16"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"pathSlug":"/sample-sentence","prev":{"frontmatter":{"path":"/python-neat-string-formatting","title":"Python: Neat string formatting","date":"2019-11-14","tags":["python"],"excerpt":"In my efforts to learn python, I've been spending some time on Codewars doing katas. Apart from being a good place to come across problems to solve, Codewars also lists top voted solutions for katas which are a great source for learning some new tricks."}},"next":null}}}