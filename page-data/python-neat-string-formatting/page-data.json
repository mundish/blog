{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-neat-string-formatting","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/python-neat-string-formatting\",\n  \"date\": \"2019-11-14\",\n  \"title\": \"Python: Neat string formatting\",\n  \"tags\": [\"python\"],\n  \"excerpt\": \"In my efforts to learn python, I've been spending some time on Codewars doing katas. Apart from being a good place to come across problems to solve, Codewars also lists top voted solutions for katas which are a great source for learning some new tricks.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In my efforts to learn python, I've been spending some time on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.codewars.com\"\n  }, \"Codewars\"), \" doing katas.\\nApart from being a good place to come across problems to solve,\\nCodewars also lists top voted solutions for katas which are a great source for learning some new tricks.\"), mdx(\"p\", null, \"One such trick I've picked up is the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"def create_phone_number(n):\\n  return \\\"({}{}{}) {}{}{}-{}{}{}{}\\\".format(*n)\\n\\ncreate_phone_number([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\\n\")), mdx(\"p\", null, \"This function will take an array \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n\"), \" consisting of 10 integers (0-9) and return them in the format \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"(012) 345-6789\"), \".\"), mdx(\"p\", null, \"So how does this work?\"), mdx(\"p\", null, \"Well, there's two (fairly basic) main concepts here: the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.python.org/3/library/stdtypes.html#str.format\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"format\"), \"-method\"), \"\\nand the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.python.org/3.4/tutorial/controlflow.html#unpacking-argument-lists\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"*\"), \"-operator\"), \".\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"format\"), \"-method interpolates each of the arguments passed into the corresponding \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"replacement field\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{}\"), \") in the target string.\"), mdx(\"p\", null, \"In the function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"create_phone_number\"), \" above, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n\"), \" is an array, which with the help of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*\"), \" is \\\"unpacked\\\",\\nor split into a series of single arguments passed into the function.\"), mdx(\"p\", null, \"If you're familiar with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\"\n  }, \"spread\"), \"\\nin JavaScript this should be familiar.\"), mdx(\"p\", null, \"This is cool and all, but passing that phone number as an array feels cumbersome, don't you think?\"), mdx(\"p\", null, \"Not a problem, since (like with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"spread\"), \" ) we can unpack strings too:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"def format_phone_number(n):\\n  return \\\"({}{}{}) {}{}{}-{}{}{}{}\\\".format(*n)\\n\\nformat_phone_number(\\\"0123456789\\\")\\n\")), mdx(\"p\", null, \"That's nicer!\"), mdx(\"p\", null, \"To wrap up, here's a couple of examples for other cases where this could be a suitable solution:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"def format_date(date):\\n    # YYYY-MM-DD\\n    return \\\"{}{}{}{}-{}{}-{}{}\\\".format(*date)\\n\\ndef format_swedish_personal_id_number(n): # YYYYMMDD-XXXX\\n    return \\\"{}{}{}{}{}{}{}{}-{}{}{}{}\\\".format(*n)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Python: Neat string formatting","date":"2019-11-14"}}},"pageContext":{"pathSlug":"/python-neat-string-formatting","prev":{"frontmatter":{"path":"/hello","title":"Hello","date":"2019-08-24","tags":["uncategorized"],"excerpt":"This is the first post"}},"next":{"frontmatter":{"path":"/sample-sentence","title":"Sample sentence","date":"2019-11-16","tags":["japanese"],"excerpt":"The idea here is to figure out the translation of a random sentence I've come up with: You're only mad because they stole the izakaya's tame monkey."}}}},"staticQueryHashes":["3000541721"]}