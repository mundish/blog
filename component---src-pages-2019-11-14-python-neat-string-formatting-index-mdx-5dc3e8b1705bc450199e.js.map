{"version":3,"sources":["webpack:///./src/pages/2019-11-14-python-neat-string-formatting/index.mdx"],"names":["_frontmatter","path","date","title","tags","excerpt","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","Object","_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__","assign","mdxType","parentName","href","className","isMDXComponent"],"mappings":"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","file":"component---src-pages-2019-11-14-python-neat-string-formatting-index-mdx-5dc3e8b1705bc450199e.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"path\": \"/python-neat-string-formatting\",\n  \"date\": \"2019-11-14\",\n  \"title\": \"Python: Neat string formatting\",\n  \"tags\": [\"python\"],\n  \"excerpt\": \"In my efforts to learn python, I've been spending some time on Codewars doing katas. Apart from being a good place to come across problems to solve, Codewars also lists top voted solutions for katas which are a great source for learning some new tricks.\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`In my efforts to learn python, I've been spending some time on `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.codewars.com\"\n      }}>{`Codewars`}</a>{` doing katas.\nApart from being a good place to come across problems to solve,\nCodewars also lists top voted solutions for katas which are a great source for learning some new tricks.`}</p>\n    <br />\nOne such trick I've picked up is the following:\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def create_phone_number(n):\n  return \"({}{}{}) {}{}{}-{}{}{}{}\".format(*n)\n\ncreate_phone_number([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n`}</code></pre>\n    <br />\n    <p>{`This function will take an array `}<inlineCode parentName=\"p\">{`n`}</inlineCode>{` consisting of 10 integers (0-9) and return them in the format `}<em parentName=\"p\">{`(012) 345-6789`}</em>{`.`}</p>\n    <br />\n    <p>{`So how does this work?`}</p>\n    <p>{`Well, there's two (fairly basic) main concepts here: the `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.python.org/3/library/stdtypes.html#str.format\"\n      }}><inlineCode parentName=\"a\">{`format`}</inlineCode>{`-method`}</a>{`\nand the `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.python.org/3.4/tutorial/controlflow.html#unpacking-argument-lists\"\n      }}><inlineCode parentName=\"a\">{`*`}</inlineCode>{`-operator`}</a>{`.`}</p>\n    <br />\n    <p>{`The `}<inlineCode parentName=\"p\">{`format`}</inlineCode>{`-method interpolates each of the arguments passed into the corresponding `}<em parentName=\"p\">{`replacement field`}</em>{` (`}<inlineCode parentName=\"p\">{`{}`}</inlineCode>{`) in the target string.`}</p>\n    <br />\n    <p>{`In the function `}<inlineCode parentName=\"p\">{`create_phone_number`}</inlineCode>{` above, `}<inlineCode parentName=\"p\">{`n`}</inlineCode>{` is an array, which with the help of `}<inlineCode parentName=\"p\">{`*`}</inlineCode>{` is \"unpacked\",\nor split into a series of single arguments passed into the function.`}</p>\n    <p>{`If you're familiar with `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\"\n      }}>{`spread`}</a>{`\nin JavaScript this should be familiar.`}</p>\n    <br />\n    <p>{`This is cool and all, but passing that phone number as an array feels cumbersome, don't you think?`}</p>\n    <p>{`Not a problem, since (like with `}<em parentName=\"p\">{`spread`}</em>{` ) we can unpack strings too:`}</p>\n    <br />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def format_phone_number(n):\n  return \"({}{}{}) {}{}{}-{}{}{}{}\".format(*n)\n\nformat_phone_number(\"0123456789\")\n`}</code></pre>\n    <br />\n    <p>{`That's nicer!`}</p>\n    <br />\n    <p>{`To wrap up, here's a couple of examples for other cases where this could be a suitable solution:`}</p>\n    <br />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def format_date(date):\n    # YYYY-MM-DD\n    return \"{}{}{}{}-{}{}-{}{}\".format(*date)\n\ndef format_swedish_personal_id_number(n): # YYYYMMDD-XXXX\n    return \"{}{}{}{}{}{}{}{}-{}{}{}{}\".format(*n)\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}